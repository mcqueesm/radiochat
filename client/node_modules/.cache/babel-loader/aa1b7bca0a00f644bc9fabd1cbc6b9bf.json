{"ast":null,"code":"import _toConsumableArray from \"/Users/RoseSamuel/Desktop/RadioChat/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/RoseSamuel/Desktop/RadioChat/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/RoseSamuel/Desktop/RadioChat/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/RoseSamuel/Desktop/RadioChat/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/RoseSamuel/Desktop/RadioChat/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/RoseSamuel/Desktop/RadioChat/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/RoseSamuel/Desktop/RadioChat/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/RoseSamuel/Desktop/RadioChat/client/src/components/Main.js\";\nimport React, { Component } from \"react\";\nimport \"../App.css\"; //Bootstrap used by Reactstrap\n\nimport \"bootstrap/dist/css/bootstrap.min.css\"; //Reactstrap components\n\nimport { Alert, Button, InputGroup, InputGroupText, InputGroupAddon, Collapse, CardBody, Card, Input, Form, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink, Dropdown, DropdownMenu, DropdownToggle, Modal, ModalHeader, ModalBody, ModalFooter, Fade } from \"reactstrap\"; //Create client side socket\n\nimport * as io from \"socket.io-client\";\nvar socket = io.connect(\"http://localhost:5000\"); //Main component for RadioChat\n\nvar Main =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Main, _Component);\n\n  function Main(props) {\n    var _this;\n\n    _classCallCheck(this, Main);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Main).call(this, props));\n    _this.state = {\n      //All local messages\n      messages: [],\n      //All room messages (deleted upon leaving room)\n      roomMessages: [],\n      //Stores message input\n      input: \"\",\n      //Your socket.id\n      id: \"\",\n      //Your current name\n      name: \"\",\n      //List of local names based on your radius\n      localUsers: [],\n      //Local rooms based on radius\n      rooms: [],\n      //Names of users in current room\n      roomNames: [],\n      //Stores 'change name' input\n      newName: \"\",\n      //Your current latitude longitude\n      location: {\n        latitude: \"\",\n        longitude: \"\"\n      },\n      //Holds id of setInterval that periodically emits location and other info to server\n      locationInterval: null,\n      //Chat radius\n      radius: 1,\n      //False if modal closed, true if open\n      modal: false,\n      //On failure set to false, causing alert to render\n      nameSuccess: true,\n      //Name of user currently clicked on (for PM)\n      activeName: null,\n      //Name of current room\n      activeRoom: null,\n      //Controls fade in of alerts\n      fadeIn: false\n    }; //bind 'this' to component methods\n\n    _this.handleSend = _this.handleSend.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.beginLocationEmit = _this.beginLocationEmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleNameChange = _this.handleNameChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setName = _this.setName.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.selectName = _this.selectName.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleRoomCreation = _this.handleRoomCreation.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.selectRoom = _this.selectRoom.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setChatRadius = _this.setChatRadius.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleFade = _this.toggleFade.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addMessage = _this.addMessage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addRoomMessage = _this.addRoomMessage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addServerMessage = _this.addServerMessage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleNameChangeResult = _this.handleNameChangeResult.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateLocationBasedInfo = _this.updateLocationBasedInfo.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addPrivateMessage = _this.addPrivateMessage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Main, [{\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate() {\n      //Cause message window to scroll automatically for message overflow\n      var elem = document.getElementById(\"message-window\");\n      elem.scrollTop = elem.scrollHeight;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var current = this;\n      /* This listener called when current chat room is no longer within client's\n      chat radius and the server has ejected them from the room*/\n\n      socket.on(\"force_leave\", function () {\n        current.setState({\n          activeRoom: null\n        });\n      }); //Listener for messages emitted from current room\n\n      socket.on(\"room_chat\", this.addRoomMessage); //Once connected client begins emitting location info\n\n      socket.on(\"on_connection\", function (userInfo) {\n        //socket id received from server\n        current.setState({\n          id: userInfo.id\n        }, function () {\n          //emit location and set name received from server\n          current.beginLocationEmit(500);\n          current.setName(userInfo.name);\n        });\n      }); //Room name already exists\n\n      socket.on(\"room_fail\", function () {\n        console.log(\"This name already exists\");\n      }); //Receive general messages from server\n\n      socket.on(\"server_message\", this.addServerMessage); //If name change successful, updates name, else handles failure\n\n      socket.on(\"change_name_result\", this.handleNameChangeResult); //Listens for location related updates from server\n\n      socket.on(\"locals\", this.updateLocationBasedInfo); //Listens for private messages from server\n\n      socket.on(\"private\", this.addPrivateMessage);\n    }\n    /*Add private message to state.messages and state.roomMessages\n    Obj Keys:\n    msg - message sent from user\n    name - name of sender*/\n\n  }, {\n    key: \"addPrivateMessage\",\n    value: function addPrivateMessage(obj) {\n      //add css class 'privateSyle' to message\n      var message = \"<span class='privateStyle'>\" + obj.name + \"</span>\" + \": \" + obj.msg;\n      this.setState({\n        messages: [].concat(_toConsumableArray(this.state.messages), [message]),\n        roomMessages: [].concat(_toConsumableArray(this.state.roomMessages), [message])\n      });\n    }\n    /*Add server message to state.messages and state.roomMessages\n    Obj Keys:\n    msg - message sent from server\n    type - type of message (determines css)*/\n\n  }, {\n    key: \"addServerMessage\",\n    value: function addServerMessage(obj) {\n      var message = \"<div class='\" + obj.type + \"'>\" + obj.message + \"</div>\";\n      this.setState({\n        messages: [].concat(_toConsumableArray(this.state.messages), [message]),\n        roomMessages: [].concat(_toConsumableArray(this.state.roomMessages), [message])\n      });\n    }\n    /*Add user message to state.roomMessages\n    Obj Keys:\n    msg - message sent from server\n    name - name of sender*/\n\n  }, {\n    key: \"addRoomMessage\",\n    value: function addRoomMessage(obj) {\n      var message = \"<span class='nameStyle'>\" + obj.name + \"</span>\" + \": \" + obj.msg;\n      this.setState({\n        roomMessages: [].concat(_toConsumableArray(this.state.roomMessages), [message])\n      });\n    }\n    /*Add user message to state.messages\n    Obj Keys:\n    msg - message sent from server\n    name - name of sender*/\n\n  }, {\n    key: \"addMessage\",\n    value: function addMessage(obj) {\n      console.log(\"in client addMessage, message is: \", obj.msg);\n      var message = \"<span class='nameStyle'>\" + obj.name + \"</span>\" + \": \" + obj.msg;\n      this.setState({\n        messages: [].concat(_toConsumableArray(this.state.messages), [message])\n      });\n    } //Set state.name to name\n\n  }, {\n    key: \"setName\",\n    value: function setName(name) {\n      this.setState({\n        name: name\n      });\n    } //Sends latitude/longitude of device to server every 'interval' milliseconds\n\n  }, {\n    key: \"beginLocationEmit\",\n    value: function beginLocationEmit(interval) {\n      var current = this; //Save setInterval id in state as 'locationInterval'\n\n      this.setState({\n        locationInterval: setInterval(function () {\n          //Send client id, location, activeRoom and chat radius to server\n          socket.emit(\"location_update\", {\n            id: current.state.id,\n            location: current.state.location,\n            room: current.state.activeRoom,\n            radius: current.state.radius\n          });\n        }, interval)\n      });\n    }\n    /*Handles response from server upon name change request\n    Obj Keys:\n    success - true if name successfully changed, false otherwise\n    name - new name (null on failure)*/\n\n  }, {\n    key: \"handleNameChangeResult\",\n    value: function handleNameChangeResult(result) {\n      var _this2 = this;\n\n      //Upon failure trigger nameSuccess and toggleFade for alert\n      if (!result.success) {\n        this.setState({\n          nameSuccess: result.success\n        });\n        this.toggleFade(); //Fade out alert after 3 seconds\n\n        var intervalID1 = setInterval(function () {\n          _this2.toggleFade();\n\n          clearInterval(intervalID1);\n        }, 3000); //Remove alert after 4 seconds\n\n        var intervalID2 = setInterval(function () {\n          _this2.setState({\n            nameSuccess: true\n          });\n\n          clearInterval(intervalID2);\n        }, 4000);\n      } //Set name upon success\n      else {\n          this.setName(result.name);\n        }\n    } //Handles messages sent by client\n\n  }, {\n    key: \"handleSend\",\n    value: function handleSend(event) {\n      event.preventDefault(); //Send private message if user is selected from guest list\n\n      if (this.state.activeName) {\n        socket.emit(\"private\", {\n          msg: this.state.input,\n          recipient: this.state.activeName,\n          name: this.state.name\n        });\n      } //Else if user is in a room, send to the room\n      else if (this.state.activeRoom) {\n          socket.emit(\"room_chat\", {\n            msg: this.state.input,\n            room: this.state.activeRoom\n          });\n        } //If none of the above, emit message to own id\n        else if (!this.state.activeName) {\n            console.log(\"emitting message: \", this.state.input);\n            socket.emit(this.state.name, {\n              msg: this.state.input,\n              name: this.state.name\n            });\n          } //Clear input from state\n\n\n      this.setState({\n        input: \"\"\n      });\n    } //Send new name request to server\n\n  }, {\n    key: \"handleNameChange\",\n    value: function handleNameChange(name) {\n      socket.emit(\"change_name\", name);\n    } //Handle clicking on name in Guest menu\n\n  }, {\n    key: \"selectName\",\n    value: function selectName(name) {\n      var _this3 = this;\n\n      this.setState(function (_ref) {\n        var activeName = _ref.activeName;\n\n        //If name already selected, or is client name, set activeName to null\n        if (activeName === name || name === _this3.state.name) {\n          return {\n            activeName: null\n          };\n        } //otherwise set activeName to name\n\n\n        return {\n          activeName: name\n        };\n      });\n    } //Handle room selection\n\n  }, {\n    key: \"selectRoom\",\n    value: function selectRoom(name) {\n      var _this4 = this;\n\n      //Clear room messages and deselect Guest names\n      this.setState({\n        roomMessages: [],\n        activeName: null\n      });\n      this.setState(function (_ref2) {\n        var activeRoom = _ref2.activeRoom;\n\n        //If in room, leave it\n        if (activeRoom) {\n          socket.emit(\"leave_room\", {\n            room: activeRoom,\n            name: _this4.state.name\n          });\n        } //If clicking on room already selected, unselect\n\n\n        if (activeRoom === name) {\n          return {\n            activeRoom: null\n          };\n        } //Otherwise join the selected room\n        else {\n            socket.emit(\"join_room\", {\n              room: name,\n              name: _this4.state.name\n            });\n            return {\n              activeRoom: name\n            };\n          }\n      });\n    } //Called after room is created\n\n  }, {\n    key: \"handleRoomCreation\",\n    value: function handleRoomCreation(name) {\n      socket.emit(\"room_creation\", {\n        name: name,\n        location: this.state.location\n      });\n    } //Called each time range input of chat radius changes\n\n  }, {\n    key: \"setChatRadius\",\n    value: function setChatRadius(rad) {\n      this.setState({\n        radius: rad\n      });\n    } //Toggles state.fadeIn, which controls fade of alerts\n\n  }, {\n    key: \"toggleFade\",\n    value: function toggleFade() {\n      this.setState({\n        fadeIn: !this.state.fadeIn\n      });\n    }\n    /*Handles response from server after client emits location information\n    Obj Keys:\n    names - array of all local user names\n    rooms - array of all local Rooms\n    roomNames - array of user names of users in current room (empty array if no room selected)\n    */\n\n  }, {\n    key: \"updateLocationBasedInfo\",\n    value: function updateLocationBasedInfo(obj) {\n      var _this5 = this;\n\n      //Update rooms and roomNames\n      this.setState({\n        rooms: obj.rooms,\n        roomNames: obj.roomNames\n      }); //Users who have left since last update\n\n      var noLonger = this.state.localUsers.filter(function (x) {\n        return !obj.names.includes(x);\n      }); //Users who have joined since last update\n\n      var newUsers = obj.names.filter(function (x) {\n        return !_this5.state.localUsers.includes(x);\n      }); //Remove listeners for users who are no longer local\n\n      if (noLonger) {\n        noLonger.forEach(function (x) {\n          socket.off(x, _this5.addMessage);\n        });\n      } //Add listener for users who are local\n\n\n      if (newUsers) {\n        newUsers.forEach(function (x) {\n          socket.on(x, _this5.addMessage);\n        });\n      } //Update localUsers\n\n\n      this.setState({\n        localUsers: obj.names\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var current = this;\n\n      if (\"geolocation\" in navigator) {\n        navigator.geolocation.getCurrentPosition(function (position) {\n          current.setState({\n            location: {\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude\n            }\n          });\n        });\n      }\n\n      var messageList = this.state.messages.map(function (x, index) {\n        return React.createElement(\"div\", {\n          className: \"message-item\",\n          key: index,\n          dangerouslySetInnerHTML: {\n            __html: x\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 342\n          },\n          __self: this\n        });\n      });\n      var roomMessageList = this.state.roomMessages.map(function (x, index) {\n        return React.createElement(\"div\", {\n          className: \"message-item\",\n          key: index,\n          dangerouslySetInnerHTML: {\n            __html: x\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 351\n          },\n          __self: this\n        });\n      });\n      var nameList = this.state.localUsers.map(function (x, index) {\n        return React.createElement(\"div\", {\n          className: \"clickable\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 360\n          },\n          __self: this\n        }, React.createElement(ListClickable, {\n          isActive: _this6.state.activeName == x,\n          id: index,\n          item: x,\n          handleClick: _this6.selectName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 361\n          },\n          __self: this\n        }));\n      });\n      var roomNameList = this.state.roomNames.map(function (x, index) {\n        return React.createElement(\"div\", {\n          className: \"clickable\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 372\n          },\n          __self: this\n        }, React.createElement(ListClickable, {\n          isActive: _this6.state.activeName == x,\n          id: index,\n          item: x,\n          handleClick: _this6.selectName,\n          className: \"clickable\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 373\n          },\n          __self: this\n        }));\n      });\n      var roomList = this.state.rooms.map(function (x, index) {\n        return React.createElement(ListClickable, {\n          isActive: _this6.state.activeRoom == x,\n          id: index,\n          key: index,\n          item: x,\n          handleClick: _this6.selectRoom,\n          className: \"clickable\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 386\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: \"alert-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navigation\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        color: \"faded\",\n        light: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      }, React.createElement(NavbarBrand, {\n        className: \"mr-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        },\n        __self: this\n      }, \"RadioChat\"), React.createElement(Nav, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402\n        },\n        __self: this\n      }, React.createElement(NavItem, {\n        className: \"nav-items\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }, React.createElement(ModalItem, {\n        btnText: \"Change Name\",\n        title: \"Enter new name: \",\n        handleClick: this.handleNameChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        },\n        __self: this\n      })), React.createElement(NavItem, {\n        className: \"nav-items\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }, React.createElement(ModalItem, {\n        btnText: \"Create Room\",\n        title: \"Enter room name:\",\n        handleClick: this.handleRoomCreation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411\n        },\n        __self: this\n      })), React.createElement(NavItem, {\n        className: \"nav-items\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417\n        },\n        __self: this\n      }, React.createElement(ModalItem, {\n        btnText: \"Chat Radius\",\n        title: \"Set chat radius (miles): \",\n        isRange: true,\n        setChatRadius: this.setChatRadius,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        id: \"message-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429\n        },\n        __self: this\n      }, !this.state.nameSuccess && React.createElement(\"div\", {\n        className: \"alert\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431\n        },\n        __self: this\n      }, React.createElement(Fade, {\n        in: this.state.fadeIn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432\n        },\n        __self: this\n      }, React.createElement(Alert, {\n        color: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433\n        },\n        __self: this\n      }, \"That name is already in use!\"))), React.createElement(\"div\", {\n        id: \"message-window\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437\n        },\n        __self: this\n      }, this.state.activeRoom ? roomMessageList : messageList), React.createElement(\"div\", {\n        id: \"right-panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"user-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"headings\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442\n        },\n        __self: this\n      }, \"Guests\"), this.state.activeRoom ? roomNameList : nameList), React.createElement(\"div\", {\n        id: \"room-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"headings\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446\n        },\n        __self: this\n      }, \"Rooms\"), roomList)), React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 450\n        },\n        __self: this\n      }, React.createElement(InputGroup, {\n        id: \"textInput\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 451\n        },\n        __self: this\n      }, React.createElement(Input, {\n        id: \"textField\",\n        value: this.state.input,\n        onChange: function onChange(e) {\n          return _this6.setState({\n            input: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452\n        },\n        __self: this\n      }), React.createElement(InputGroupAddon, {\n        addonType: \"append\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 457\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        onClick: this.handleSend,\n        color: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458\n        },\n        __self: this\n      }, \"Send\")))))));\n    }\n  }]);\n\n  return Main;\n}(Component);\n\nvar ModalItem =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(ModalItem, _Component2);\n\n  function ModalItem(props) {\n    var _this7;\n\n    _classCallCheck(this, ModalItem);\n\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(ModalItem).call(this, props));\n    _this7.state = {\n      modal: false,\n      roomName: \"\",\n      radius: 1\n    };\n    _this7.modalToggle = _this7.modalToggle.bind(_assertThisInitialized(_assertThisInitialized(_this7)));\n    _this7.handleClick = _this7.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this7)));\n    _this7.handleChange = _this7.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this7)));\n    return _this7;\n  }\n\n  _createClass(ModalItem, [{\n    key: \"handleClick\",\n    value: function handleClick(event) {\n      event.preventDefault();\n      this.props.handleClick(this.state.roomName);\n      this.setState({\n        roomName: \"\",\n        modal: false\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      var _this8 = this;\n\n      this.setState({\n        radius: event.target.value\n      }, function () {\n        _this8.props.setChatRadius(_this8.state.radius);\n      });\n    }\n  }, {\n    key: \"modalToggle\",\n    value: function modalToggle() {\n      this.setState({\n        modal: !this.state.modal\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this9 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onClick: this.modalToggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504\n        },\n        __self: this\n      }, this.props.btnText), React.createElement(Modal, {\n        isOpen: this.state.modal,\n        toggle: this.modalToggle,\n        className: this.props.className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.modalToggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510\n        },\n        __self: this\n      }, this.props.title, this.props.isRange ? this.state.radius : \"\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515\n        },\n        __self: this\n      }, React.createElement(InputGroup, {\n        id: \"roomInput\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516\n        },\n        __self: this\n      }, this.props.isRange ? React.createElement(\"div\", {\n        className: \"rangeDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519\n        },\n        __self: this\n      }, \"0.1\"), React.createElement(\"input\", {\n        className: \"rangeInput\",\n        type: \"range\",\n        min: \"0.1\",\n        max: \"1\",\n        step: \"0.1\",\n        onChange: function onChange(e) {\n          return _this9.handleChange(e);\n        },\n        value: this.state.radius,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 520\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 529\n        },\n        __self: this\n      }, \"1.0\")) : React.createElement(Input, {\n        value: this.state.roomName,\n        onChange: function onChange(e) {\n          return _this9.setState({\n            roomName: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 532\n        },\n        __self: this\n      }), this.props.isRange ? \"\" : React.createElement(InputGroupAddon, {\n        addonType: \"append\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        onClick: this.handleClick,\n        color: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 541\n        },\n        __self: this\n      }, \"Submit\")))))));\n    }\n  }]);\n\n  return ModalItem;\n}(Component);\n\nvar ListClickable =\n/*#__PURE__*/\nfunction (_Component3) {\n  _inherits(ListClickable, _Component3);\n\n  function ListClickable() {\n    _classCallCheck(this, ListClickable);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ListClickable).apply(this, arguments));\n  }\n\n  _createClass(ListClickable, [{\n    key: \"handleClick\",\n    value: function handleClick(event) {\n      this.props.handleClick(event.target.id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this10 = this;\n\n      return React.createElement(\"div\", {\n        onClick: function onClick(e) {\n          return _this10.handleClick(e);\n        },\n        id: this.props.item,\n        className: this.props.isActive ? \"clickedItem\" : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 565\n        },\n        __self: this\n      }, this.props.item);\n    }\n  }]);\n\n  return ListClickable;\n}(Component);\n\nexport default Main;","map":{"version":3,"sources":["/Users/RoseSamuel/Desktop/RadioChat/client/src/components/Main.js"],"names":["React","Component","Alert","Button","InputGroup","InputGroupText","InputGroupAddon","Collapse","CardBody","Card","Input","Form","Navbar","NavbarToggler","NavbarBrand","Nav","NavItem","NavLink","Dropdown","DropdownMenu","DropdownToggle","Modal","ModalHeader","ModalBody","ModalFooter","Fade","io","socket","connect","Main","props","state","messages","roomMessages","input","id","name","localUsers","rooms","roomNames","newName","location","latitude","longitude","locationInterval","radius","modal","nameSuccess","activeName","activeRoom","fadeIn","handleSend","bind","beginLocationEmit","handleNameChange","setName","selectName","handleRoomCreation","selectRoom","setChatRadius","toggleFade","addMessage","addRoomMessage","addServerMessage","handleNameChangeResult","updateLocationBasedInfo","addPrivateMessage","elem","document","getElementById","scrollTop","scrollHeight","current","on","setState","userInfo","console","log","obj","message","msg","type","interval","setInterval","emit","room","result","success","intervalID1","clearInterval","intervalID2","event","preventDefault","recipient","rad","noLonger","filter","x","names","includes","newUsers","forEach","off","navigator","geolocation","getCurrentPosition","position","coords","messageList","map","index","__html","roomMessageList","nameList","roomNameList","roomList","e","target","value","ModalItem","roomName","modalToggle","handleClick","handleChange","btnText","className","title","isRange","ListClickable","item","isActive"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"../App.css\";\n//Bootstrap used by Reactstrap\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n//Reactstrap components\nimport {\n  Alert,\n  Button,\n  InputGroup,\n  InputGroupText,\n  InputGroupAddon,\n  Collapse,\n  CardBody,\n  Card,\n  Input,\n  Form,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Dropdown,\n  DropdownMenu,\n  DropdownToggle,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Fade\n} from \"reactstrap\";\n\n//Create client side socket\nimport * as io from \"socket.io-client\";\nconst socket = io.connect(\"http://localhost:5000\");\n\n//Main component for RadioChat\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      //All local messages\n      messages: [],\n      //All room messages (deleted upon leaving room)\n      roomMessages: [],\n      //Stores message input\n      input: \"\",\n      //Your socket.id\n      id: \"\",\n      //Your current name\n      name: \"\",\n      //List of local names based on your radius\n      localUsers: [],\n      //Local rooms based on radius\n      rooms: [],\n      //Names of users in current room\n      roomNames: [],\n      //Stores 'change name' input\n      newName: \"\",\n      //Your current latitude longitude\n      location: { latitude: \"\", longitude: \"\" },\n      //Holds id of setInterval that periodically emits location and other info to server\n      locationInterval: null,\n      //Chat radius\n      radius: 1,\n      //False if modal closed, true if open\n      modal: false,\n      //On failure set to false, causing alert to render\n      nameSuccess: true,\n      //Name of user currently clicked on (for PM)\n      activeName: null,\n      //Name of current room\n      activeRoom: null,\n      //Controls fade in of alerts\n      fadeIn: false\n    };\n    //bind 'this' to component methods\n    this.handleSend = this.handleSend.bind(this);\n    this.beginLocationEmit = this.beginLocationEmit.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.setName = this.setName.bind(this);\n    this.selectName = this.selectName.bind(this);\n    this.handleRoomCreation = this.handleRoomCreation.bind(this);\n    this.selectRoom = this.selectRoom.bind(this);\n    this.setChatRadius = this.setChatRadius.bind(this);\n    this.toggleFade = this.toggleFade.bind(this);\n    this.addMessage = this.addMessage.bind(this);\n    this.addRoomMessage = this.addRoomMessage.bind(this);\n    this.addServerMessage = this.addServerMessage.bind(this);\n    this.handleNameChangeResult = this.handleNameChangeResult.bind(this);\n    this.updateLocationBasedInfo = this.updateLocationBasedInfo.bind(this);\n    this.addPrivateMessage = this.addPrivateMessage.bind(this);\n  }\n  componentWillUpdate() {\n    //Cause message window to scroll automatically for message overflow\n    var elem = document.getElementById(\"message-window\");\n    elem.scrollTop = elem.scrollHeight;\n  }\n  componentDidMount() {\n    let current = this;\n\n    /* This listener called when current chat room is no longer within client's\n    chat radius and the server has ejected them from the room*/\n    socket.on(\"force_leave\", function() {\n      current.setState({ activeRoom: null });\n    });\n    //Listener for messages emitted from current room\n    socket.on(\"room_chat\", this.addRoomMessage);\n    //Once connected client begins emitting location info\n    socket.on(\"on_connection\", function(userInfo) {\n      //socket id received from server\n      current.setState({ id: userInfo.id }, () => {\n        //emit location and set name received from server\n        current.beginLocationEmit(500);\n        current.setName(userInfo.name);\n      });\n    });\n    //Room name already exists\n    socket.on(\"room_fail\", function() {\n      console.log(\"This name already exists\");\n    });\n    //Receive general messages from server\n    socket.on(\"server_message\", this.addServerMessage);\n    //If name change successful, updates name, else handles failure\n    socket.on(\"change_name_result\", this.handleNameChangeResult);\n    //Listens for location related updates from server\n    socket.on(\"locals\", this.updateLocationBasedInfo);\n    //Listens for private messages from server\n    socket.on(\"private\", this.addPrivateMessage);\n  }\n  /*Add private message to state.messages and state.roomMessages\n  Obj Keys:\n  msg - message sent from user\n  name - name of sender*/\n  addPrivateMessage(obj) {\n    //add css class 'privateSyle' to message\n    let message =\n      \"<span class='privateStyle'>\" + obj.name + \"</span>\" + \": \" + obj.msg;\n    this.setState({\n      messages: [...this.state.messages, message],\n      roomMessages: [...this.state.roomMessages, message]\n    });\n  }\n  /*Add server message to state.messages and state.roomMessages\n  Obj Keys:\n  msg - message sent from server\n  type - type of message (determines css)*/\n  addServerMessage(obj) {\n    let message = \"<div class='\" + obj.type + \"'>\" + obj.message + \"</div>\";\n    this.setState({\n      messages: [...this.state.messages, message],\n      roomMessages: [...this.state.roomMessages, message]\n    });\n  }\n  /*Add user message to state.roomMessages\n  Obj Keys:\n  msg - message sent from server\n  name - name of sender*/\n  addRoomMessage(obj) {\n    let message =\n      \"<span class='nameStyle'>\" + obj.name + \"</span>\" + \": \" + obj.msg;\n    this.setState({ roomMessages: [...this.state.roomMessages, message] });\n  }\n  /*Add user message to state.messages\n  Obj Keys:\n  msg - message sent from server\n  name - name of sender*/\n  addMessage(obj) {\n    console.log(\"in client addMessage, message is: \", obj.msg);\n    let message =\n      \"<span class='nameStyle'>\" + obj.name + \"</span>\" + \": \" + obj.msg;\n    this.setState({ messages: [...this.state.messages, message] });\n  }\n  //Set state.name to name\n  setName(name) {\n    this.setState({ name: name });\n  }\n  //Sends latitude/longitude of device to server every 'interval' milliseconds\n  beginLocationEmit(interval) {\n    let current = this;\n    //Save setInterval id in state as 'locationInterval'\n    this.setState({\n      locationInterval: setInterval(function() {\n        //Send client id, location, activeRoom and chat radius to server\n        socket.emit(\"location_update\", {\n          id: current.state.id,\n          location: current.state.location,\n          room: current.state.activeRoom,\n          radius: current.state.radius\n        });\n      }, interval)\n    });\n  }\n  /*Handles response from server upon name change request\n  Obj Keys:\n  success - true if name successfully changed, false otherwise\n  name - new name (null on failure)*/\n  handleNameChangeResult(result) {\n    //Upon failure trigger nameSuccess and toggleFade for alert\n    if (!result.success) {\n      this.setState({ nameSuccess: result.success });\n      this.toggleFade();\n      //Fade out alert after 3 seconds\n      let intervalID1 = setInterval(() => {\n        this.toggleFade();\n        clearInterval(intervalID1);\n      }, 3000);\n      //Remove alert after 4 seconds\n      let intervalID2 = setInterval(() => {\n        this.setState({ nameSuccess: true });\n        clearInterval(intervalID2);\n      }, 4000);\n    }\n    //Set name upon success\n    else {\n      this.setName(result.name);\n    }\n  }\n  //Handles messages sent by client\n  handleSend(event) {\n    event.preventDefault();\n    //Send private message if user is selected from guest list\n    if (this.state.activeName) {\n      socket.emit(\"private\", {\n        msg: this.state.input,\n        recipient: this.state.activeName,\n        name: this.state.name\n      });\n    }\n    //Else if user is in a room, send to the room\n    else if (this.state.activeRoom) {\n      socket.emit(\"room_chat\", {\n        msg: this.state.input,\n        room: this.state.activeRoom\n      });\n    }\n    //If none of the above, emit message to own id\n    else if (!this.state.activeName) {\n      console.log(\"emitting message: \", this.state.input);\n      socket.emit(this.state.name, {\n        msg: this.state.input,\n        name: this.state.name\n      });\n    }\n    //Clear input from state\n    this.setState({ input: \"\" });\n  }\n  //Send new name request to server\n  handleNameChange(name) {\n    socket.emit(\"change_name\", name);\n  }\n  //Handle clicking on name in Guest menu\n  selectName(name) {\n    this.setState(({ activeName }) => {\n      //If name already selected, or is client name, set activeName to null\n      if (activeName === name || name === this.state.name) {\n        return { activeName: null };\n      }\n      //otherwise set activeName to name\n      return { activeName: name };\n    });\n  }\n  //Handle room selection\n  selectRoom(name) {\n    //Clear room messages and deselect Guest names\n    this.setState({ roomMessages: [], activeName: null });\n    this.setState(({ activeRoom }) => {\n      //If in room, leave it\n      if (activeRoom) {\n        socket.emit(\"leave_room\", { room: activeRoom, name: this.state.name });\n      }\n      //If clicking on room already selected, unselect\n      if (activeRoom === name) {\n        return { activeRoom: null };\n      }\n      //Otherwise join the selected room\n      else {\n        socket.emit(\"join_room\", { room: name, name: this.state.name });\n        return { activeRoom: name };\n      }\n    });\n  }\n  //Called after room is created\n  handleRoomCreation(name) {\n    socket.emit(\"room_creation\", { name: name, location: this.state.location });\n  }\n  //Called each time range input of chat radius changes\n  setChatRadius(rad) {\n    this.setState({ radius: rad });\n  }\n  //Toggles state.fadeIn, which controls fade of alerts\n  toggleFade() {\n    this.setState({\n      fadeIn: !this.state.fadeIn\n    });\n  }\n  /*Handles response from server after client emits location information\n  Obj Keys:\n  names - array of all local user names\n  rooms - array of all local Rooms\n  roomNames - array of user names of users in current room (empty array if no room selected)\n  */\n  updateLocationBasedInfo(obj) {\n    //Update rooms and roomNames\n    this.setState({ rooms: obj.rooms, roomNames: obj.roomNames });\n    //Users who have left since last update\n    let noLonger = this.state.localUsers.filter(x => !obj.names.includes(x));\n    //Users who have joined since last update\n    let newUsers = obj.names.filter(x => !this.state.localUsers.includes(x));\n    //Remove listeners for users who are no longer local\n    if (noLonger) {\n      noLonger.forEach(x => {\n        socket.off(x, this.addMessage);\n      });\n    }\n    //Add listener for users who are local\n    if (newUsers) {\n      newUsers.forEach(x => {\n        socket.on(x, this.addMessage);\n      });\n    }\n    //Update localUsers\n    this.setState({ localUsers: obj.names });\n  }\n\n  render() {\n    let current = this;\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        current.setState({\n          location: {\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          }\n        });\n      });\n    }\n    let messageList = this.state.messages.map((x, index) => {\n      return (\n        <div\n          className=\"message-item\"\n          key={index}\n          dangerouslySetInnerHTML={{ __html: x }}\n        />\n      );\n    });\n    let roomMessageList = this.state.roomMessages.map((x, index) => {\n      return (\n        <div\n          className=\"message-item\"\n          key={index}\n          dangerouslySetInnerHTML={{ __html: x }}\n        />\n      );\n    });\n    let nameList = this.state.localUsers.map((x, index) => {\n      return (\n        <div className=\"clickable\" key={index}>\n          <ListClickable\n            isActive={this.state.activeName == x}\n            id={index}\n            item={x}\n            handleClick={this.selectName}\n          />\n        </div>\n      );\n    });\n    let roomNameList = this.state.roomNames.map((x, index) => {\n      return (\n        <div className=\"clickable\" key={index}>\n          <ListClickable\n            isActive={this.state.activeName == x}\n            id={index}\n            item={x}\n            handleClick={this.selectName}\n            className=\"clickable\"\n          />\n        </div>\n      );\n    });\n\n    let roomList = this.state.rooms.map((x, index) => {\n      return (\n        <ListClickable\n          isActive={this.state.activeRoom == x}\n          id={index}\n          key={index}\n          item={x}\n          handleClick={this.selectRoom}\n          className=\"clickable\"\n        />\n      );\n    });\n    return (\n      <div className=\"alert-container\">\n        <div id=\"container\">\n          <div className=\"navigation\">\n            <Navbar color=\"faded\" light>\n              <NavbarBrand className=\"mr-auto\">RadioChat</NavbarBrand>\n              <Nav>\n                <NavItem className=\"nav-items\">\n                  <ModalItem\n                    btnText=\"Change Name\"\n                    title=\"Enter new name: \"\n                    handleClick={this.handleNameChange}\n                  />\n                </NavItem>\n                <NavItem className=\"nav-items\">\n                  <ModalItem\n                    btnText=\"Create Room\"\n                    title=\"Enter room name:\"\n                    handleClick={this.handleRoomCreation}\n                  />\n                </NavItem>\n                <NavItem className=\"nav-items\">\n                  <ModalItem\n                    btnText=\"Chat Radius\"\n                    title=\"Set chat radius (miles): \"\n                    isRange={true}\n                    setChatRadius={this.setChatRadius}\n                  />\n                </NavItem>\n              </Nav>\n            </Navbar>\n          </div>\n\n          <div id=\"message-container\">\n            {!this.state.nameSuccess && (\n              <div className=\"alert\">\n                <Fade in={this.state.fadeIn}>\n                  <Alert color=\"danger\">That name is already in use!</Alert>\n                </Fade>\n              </div>\n            )}\n            <div id=\"message-window\">\n              {this.state.activeRoom ? roomMessageList : messageList}\n            </div>\n            <div id=\"right-panel\">\n              <div id=\"user-list\">\n                <div className=\"headings\">Guests</div>\n                {this.state.activeRoom ? roomNameList : nameList}\n              </div>\n              <div id=\"room-list\">\n                <div className=\"headings\">Rooms</div>\n                {roomList}\n              </div>\n            </div>\n            <Form>\n              <InputGroup id=\"textInput\">\n                <Input\n                  id=\"textField\"\n                  value={this.state.input}\n                  onChange={e => this.setState({ input: e.target.value })}\n                />\n                <InputGroupAddon addonType=\"append\">\n                  <Button\n                    type=\"submit\"\n                    onClick={this.handleSend}\n                    color=\"secondary\"\n                  >\n                    Send\n                  </Button>\n                </InputGroupAddon>\n              </InputGroup>\n            </Form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass ModalItem extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      modal: false,\n      roomName: \"\",\n      radius: 1\n    };\n    this.modalToggle = this.modalToggle.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleClick(event) {\n    event.preventDefault();\n    this.props.handleClick(this.state.roomName);\n    this.setState({ roomName: \"\", modal: false });\n  }\n  handleChange(event) {\n    this.setState({ radius: event.target.value }, () => {\n      this.props.setChatRadius(this.state.radius);\n    });\n  }\n  modalToggle() {\n    this.setState({ modal: !this.state.modal });\n  }\n  render() {\n    return (\n      <div>\n        <div onClick={this.modalToggle}>{this.props.btnText}</div>\n        <Modal\n          isOpen={this.state.modal}\n          toggle={this.modalToggle}\n          className={this.props.className}\n        >\n          <ModalHeader toggle={this.modalToggle}>\n            {this.props.title}\n            {this.props.isRange ? this.state.radius : \"\"}\n          </ModalHeader>\n          <ModalBody>\n            <Form>\n              <InputGroup id=\"roomInput\">\n                {this.props.isRange ? (\n                  <div className=\"rangeDiv\">\n                    <label>0.1</label>\n                    <input\n                      className=\"rangeInput\"\n                      type=\"range\"\n                      min=\"0.1\"\n                      max=\"1\"\n                      step=\"0.1\"\n                      onChange={e => this.handleChange(e)}\n                      value={this.state.radius}\n                    />\n                    <label>1.0</label>\n                  </div>\n                ) : (\n                  <Input\n                    value={this.state.roomName}\n                    onChange={e => this.setState({ roomName: e.target.value })}\n                  />\n                )}\n                {this.props.isRange ? (\n                  \"\"\n                ) : (\n                  <InputGroupAddon addonType=\"append\">\n                    <Button\n                      type=\"submit\"\n                      onClick={this.handleClick}\n                      color=\"secondary\"\n                    >\n                      Submit\n                    </Button>\n                  </InputGroupAddon>\n                )}\n              </InputGroup>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\nclass ListClickable extends Component {\n  handleClick(event) {\n    this.props.handleClick(event.target.id);\n  }\n\n  render() {\n    return (\n      <div\n        onClick={e => this.handleClick(e)}\n        id={this.props.item}\n        className={this.props.isActive ? \"clickedItem\" : \"\"}\n      >\n        {this.props.item}\n      </div>\n    );\n  }\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}