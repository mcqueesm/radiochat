{"ast":null,"code":"import _toConsumableArray from \"/Users/RoseSamuel/Desktop/RadioChat/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/RoseSamuel/Desktop/RadioChat/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/RoseSamuel/Desktop/RadioChat/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/RoseSamuel/Desktop/RadioChat/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/RoseSamuel/Desktop/RadioChat/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/RoseSamuel/Desktop/RadioChat/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/RoseSamuel/Desktop/RadioChat/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/RoseSamuel/Desktop/RadioChat/client/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css'; //Bootstrap used by Reactstrap\n\nimport 'bootstrap/dist/css/bootstrap.min.css'; //Reactstrap components\n\nimport { Alert, Button, InputGroup, InputGroupText, InputGroupAddon, Collapse, CardBody, Card, Input, Form, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink, Dropdown, DropdownMenu, DropdownToggle, Modal, ModalHeader, ModalBody, ModalFooter, Fade } from 'reactstrap'; //Create client side socket\n\nimport * as io from 'socket.io-client';\nvar socket = io.connect('http://localhost:5000'); //Main component for RadioChat\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      //All local messages\n      messages: [],\n      //All room messages (deleted upon leaving room)\n      roomMessages: [],\n      //Stores message input\n      input: '',\n      //Your socket.id\n      id: '',\n      //Your current name\n      name: '',\n      //List of local names based on your radius\n      localUsers: [],\n      //Local rooms based on radius\n      rooms: [],\n      //Names of users in current room\n      roomNames: [],\n      //Stores 'change name' input\n      newName: '',\n      //Your current latitude longitude\n      location: {\n        latitude: '',\n        longitude: ''\n      },\n      //Holds id of setInterval that periodically emits location and other info to server\n      locationInterval: null,\n      //Chat radius\n      radius: 1,\n      //False if modal closed, true if open\n      modal: false,\n      //On failure set to false, causing alert to render\n      nameSuccess: true,\n      //Name of user currently clicked on (for PM)\n      activeName: null,\n      //Name of current room\n      activeRoom: null,\n      //Controls fade in of alerts\n      fadeIn: false\n    }; //bind 'this' to component functions\n\n    _this.handleSend = _this.handleSend.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.beginLocationEmit = _this.beginLocationEmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleNameChange = _this.handleNameChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setName = _this.setName.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.selectName = _this.selectName.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleRoomCreation = _this.handleRoomCreation.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.selectRoom = _this.selectRoom.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setChatRadius = _this.setChatRadius.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleFade = _this.toggleFade.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addMessage = _this.addMessage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addRoomMessage = _this.addRoomMessage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addServerMessage = _this.addServerMessage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleNameChangeResult = _this.handleNameChangeResult.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateLocationBasedInfo = _this.updateLocationBasedInfo.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addPrivateMessage = _this.addPrivateMessage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate() {\n      //Cause message window to scroll automatically for message overflow\n      var elem = document.getElementById('message-window');\n      elem.scrollTop = elem.scrollHeight;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var current = this;\n      /* This listener called when current chat room is no longer within client's\n      chat radius and they have left the room*/\n\n      socket.on('force_leave', function () {\n        current.setState({\n          activeRoom: null\n        });\n      }); //Listener for messages emitted from current room\n\n      socket.on('room_chat', this.addRoomMessage); //Once connected client begins emitting location info\n\n      socket.on('on_connection', function (userInfo) {\n        //socket id received from server\n        current.setState({\n          id: userInfo.id\n        }, function () {\n          //emit location and set name received from server\n          current.beginLocationEmit(3000);\n          current.setName(userInfo.name);\n        });\n      }); //Room name already exists\n\n      socket.on('room_fail', function () {\n        console.log('This name already exists');\n      }); //Receive general messages from server\n\n      socket.on('server_message', this.addServerMessage); //If name change successful, updates name, else handles failure\n\n      socket.on('change_name_result', this.handleNameChangeResult); //Listens for location related updates from server\n\n      socket.on('locals', this.updateLocationBasedInfo); //Listens for private messages from server\n\n      socket.on('private', this.addPrivateMessage);\n    }\n    /*Add private message to state.messages and state.roomMessages\n    Obj Keys:\n    msg - message sent from user\n    name - name of sender*/\n\n  }, {\n    key: \"addPrivateMessage\",\n    value: function addPrivateMessage(obj) {\n      //add css class 'privateSyle' to message\n      var message = \"<span class='privateStyle'>\" + obj.name + \"</span>\" + ': ' + obj.msg;\n      this.setState({\n        messages: [].concat(_toConsumableArray(this.state.messages), [message]),\n        roomMessages: [].concat(_toConsumableArray(this.state.roomMessages), [message])\n      });\n    }\n    /*Add server message to state.messages and state.roomMessages\n    Obj Keys:\n    msg - message sent from server\n    type - type of message (determines css)*/\n\n  }, {\n    key: \"addServerMessage\",\n    value: function addServerMessage(obj) {\n      var message = \"<div class='\" + obj.type + \"'>\" + obj.message + \"</div>\";\n      this.setState({\n        messages: [].concat(_toConsumableArray(this.state.messages), [message]),\n        roomMessages: [].concat(_toConsumableArray(this.state.roomMessages), [message])\n      });\n    }\n    /*Add user message to state.roomMessages\n    Obj Keys:\n    msg - message sent from server\n    name - name of sender*/\n\n  }, {\n    key: \"addRoomMessage\",\n    value: function addRoomMessage(obj) {\n      var message = \"<span class='nameStyle'>\" + obj.name + \"</span>\" + ': ' + obj.msg;\n      this.setState({\n        roomMessages: [].concat(_toConsumableArray(this.state.roomMessages), [message])\n      });\n    }\n    /*Add user message to state.messages\n    Obj Keys:\n    msg - message sent from server\n    name - name of sender*/\n\n  }, {\n    key: \"addMessage\",\n    value: function addMessage(obj) {\n      console.log('in client addMessage, message is: ', obj.msg);\n      var message = \"<span class='nameStyle'>\" + obj.name + \"</span>\" + ': ' + obj.msg;\n      this.setState({\n        messages: [].concat(_toConsumableArray(this.state.messages), [message])\n      });\n    } //Set state.name to name\n\n  }, {\n    key: \"setName\",\n    value: function setName(name) {\n      this.setState({\n        name: name\n      });\n    } //Sends latitude/longitude of device to server every 'interval' milliseconds\n\n  }, {\n    key: \"beginLocationEmit\",\n    value: function beginLocationEmit(interval) {\n      var current = this; //Save setInterval id in state as 'locationInterval'\n\n      this.setState({\n        locationInterval: setInterval(function () {\n          //Send client id, location, activeRoom and chat radius to server\n          socket.emit('location_update', {\n            id: current.state.id,\n            location: current.state.location,\n            room: current.state.activeRoom,\n            radius: current.state.radius\n          });\n        }, interval)\n      });\n    }\n    /*Handles response from server upon name change request\n    Obj Keys:\n    success - true if name successfully changed, false otherwise\n    name - new name (null on failure)*/\n\n  }, {\n    key: \"handleNameChangeResult\",\n    value: function handleNameChangeResult(result) {\n      var _this2 = this;\n\n      //Upon failure trigger nameSuccess and toggleFade for alert\n      if (!result.success) {\n        this.setState({\n          nameSuccess: result.success\n        });\n        this.toggleFade(); //Fade out alert after 3 seconds\n\n        var intervalID1 = setInterval(function () {\n          _this2.toggleFade();\n\n          clearInterval(intervalID1);\n        }, 3000); //Remove alert after 4 seconds\n\n        var intervalID2 = setInterval(function () {\n          _this2.setState({\n            nameSuccess: true\n          });\n\n          clearInterval(intervalID2);\n        }, 4000);\n      } //Set name upon success\n      else {\n          this.setName(result.name);\n        }\n    } //Handles messages sent by client\n\n  }, {\n    key: \"handleSend\",\n    value: function handleSend(event) {\n      event.preventDefault(); //Send private message if user is selected from guest list\n\n      if (this.state.activeName) {\n        socket.emit('private', {\n          msg: this.state.input,\n          recipient: this.state.activeName,\n          name: this.state.name\n        });\n      } //Else if user is in a room, send to the room\n      else if (this.state.activeRoom) {\n          socket.emit('room_chat', {\n            msg: this.state.input,\n            room: this.state.activeRoom\n          });\n        } //If none of the above, emit message to own id\n        else if (!this.state.activeName) {\n            console.log('emitting message: ', this.state.input);\n            socket.emit(this.state.name, {\n              msg: this.state.input,\n              name: this.state.name\n            });\n          } //Clear input from state\n\n\n      this.setState({\n        input: ''\n      });\n    } //Send new name request to server\n\n  }, {\n    key: \"handleNameChange\",\n    value: function handleNameChange(name) {\n      socket.emit('change_name', name);\n    } //Handle clicking on name in Guest menu\n\n  }, {\n    key: \"selectName\",\n    value: function selectName(name) {\n      var _this3 = this;\n\n      this.setState(function (_ref) {\n        var activeName = _ref.activeName;\n\n        //If name already selected, or is client name, set activeName to null\n        if (activeName === name || name === _this3.state.name) {\n          return {\n            activeName: null\n          };\n        } //otherwise set activeName to name\n\n\n        return {\n          activeName: name\n        };\n      });\n    } //Handle room selection\n\n  }, {\n    key: \"selectRoom\",\n    value: function selectRoom(name) {\n      var _this4 = this;\n\n      //Clear room messages and deselect Guest names\n      this.setState({\n        roomMessages: [],\n        activeName: null\n      });\n      this.setState(function (_ref2) {\n        var activeRoom = _ref2.activeRoom;\n\n        //If in room, leave it\n        if (activeRoom) {\n          socket.emit('leave_room', {\n            room: activeRoom,\n            name: _this4.state.name\n          });\n        } //If clicking on\n\n\n        if (activeRoom === name) {\n          return {\n            activeRoom: null\n          };\n        } else {\n          socket.emit('join_room', {\n            room: name,\n            name: _this4.state.name\n          });\n          return {\n            activeRoom: name\n          };\n        }\n      });\n    }\n  }, {\n    key: \"handleRoomCreation\",\n    value: function handleRoomCreation(name) {\n      socket.emit('room_creation', {\n        name: name,\n        location: this.state.location\n      });\n    }\n  }, {\n    key: \"setChatRadius\",\n    value: function setChatRadius(rad) {\n      this.setState({\n        radius: rad\n      });\n      console.log(rad);\n    }\n  }, {\n    key: \"toggleFade\",\n    value: function toggleFade() {\n      this.setState({\n        fadeIn: !this.state.fadeIn\n      });\n    }\n  }, {\n    key: \"updateLocationBasedInfo\",\n    value: function updateLocationBasedInfo(obj) {\n      var _this5 = this;\n\n      this.setState({\n        rooms: obj.rooms,\n        roomNames: obj.roomNames\n      });\n      var noLonger = this.state.localUsers.filter(function (x) {\n        return !obj.names.includes(x);\n      });\n      var newUsers = obj.names.filter(function (x) {\n        return !_this5.state.localUsers.includes(x);\n      });\n\n      if (noLonger) {\n        noLonger.forEach(function (x) {\n          socket.off(x, _this5.addMessage);\n        });\n      }\n\n      if (newUsers) {\n        newUsers.forEach(function (x) {\n          socket.on(x, _this5.addMessage);\n        });\n      }\n\n      this.setState({\n        localUsers: obj.names\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var current = this;\n\n      if (\"geolocation\" in navigator) {\n        navigator.geolocation.getCurrentPosition(function (position) {\n          current.setState({\n            location: {\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude\n            }\n          });\n        });\n      }\n\n      var messageList = this.state.messages.map(function (x, index) {\n        return React.createElement(\"div\", {\n          className: \"message-item\",\n          key: index,\n          dangerouslySetInnerHTML: {\n            __html: x\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288\n          },\n          __self: this\n        });\n      });\n      var roomMessageList = this.state.roomMessages.map(function (x, index) {\n        return React.createElement(\"div\", {\n          className: \"message-item\",\n          key: index,\n          dangerouslySetInnerHTML: {\n            __html: x\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293\n          },\n          __self: this\n        });\n      });\n      var nameList = this.state.localUsers.map(function (x, index) {\n        return React.createElement(\"div\", {\n          className: \"clickable\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 298\n          },\n          __self: this\n        }, React.createElement(ListClickable, {\n          isActive: _this6.state.activeName == x,\n          id: index,\n          key: index,\n          item: x,\n          handleClick: _this6.selectName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 298\n          },\n          __self: this\n        }));\n      });\n      var roomNameList = this.state.roomNames.map(function (x, index) {\n        return React.createElement(\"div\", {\n          className: \"clickable\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 304\n          },\n          __self: this\n        }, React.createElement(ListClickable, {\n          isActive: _this6.state.activeName == x,\n          id: index,\n          key: index,\n          item: x,\n          handleClick: _this6.selectName,\n          className: \"clickable\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 304\n          },\n          __self: this\n        }));\n      });\n      var roomList = this.state.rooms.map(function (x, index) {\n        return React.createElement(ListClickable, {\n          isActive: _this6.state.activeRoom == x,\n          id: index,\n          key: index,\n          item: x,\n          handleClick: _this6.selectRoom,\n          className: \"clickable\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 311\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        id: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navigation\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        color: \"faded\",\n        light: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }, React.createElement(NavbarBrand, {\n        className: \"mr-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, \"RadioChat\"), React.createElement(Nav, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }, React.createElement(NavItem, {\n        className: \"nav-items\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }, React.createElement(ModalItem, {\n        btnText: \"Change Name\",\n        title: \"Enter new name: \",\n        handleClick: this.handleNameChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      })), React.createElement(NavItem, {\n        className: \"nav-items\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, React.createElement(ModalItem, {\n        btnText: \"Create Room\",\n        title: \"Enter room name:\",\n        handleClick: this.handleRoomCreation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      })), React.createElement(NavItem, {\n        className: \"nav-items\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }, React.createElement(ModalItem, {\n        btnText: \"Chat Radius\",\n        title: \"Set chat radius (miles): \",\n        isRange: true,\n        setChatRadius: this.setChatRadius,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }))))), !this.state.nameSuccess ? React.createElement(Fade, {\n        in: this.state.fadeIn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, React.createElement(Alert, {\n        color: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, \"That name is already in use!\")) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"message-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"message-window\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }, this.state.activeRoom ? roomMessageList : messageList), React.createElement(\"div\", {\n        id: \"right-panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"user-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"headings\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344\n        },\n        __self: this\n      }, \"Guests\"), this.state.activeRoom, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }), this.state.activeRoom ? roomNameList : nameList), React.createElement(\"div\", {\n        id: \"room-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"headings\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }, \"Rooms\"), roomList)), React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }, React.createElement(InputGroup, {\n        id: \"textInput\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, React.createElement(Input, {\n        id: \"textField\",\n        value: this.state.input,\n        onChange: function onChange(e) {\n          return _this6.setState({\n            input: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }), React.createElement(InputGroupAddon, {\n        addonType: \"append\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        onClick: this.handleSend,\n        color: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }, \"Send\"))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar ModalItem =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(ModalItem, _Component2);\n\n  function ModalItem(props) {\n    var _this7;\n\n    _classCallCheck(this, ModalItem);\n\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(ModalItem).call(this, props));\n    _this7.state = {\n      modal: false,\n      roomName: '',\n      radius: 1\n    };\n    _this7.modalToggle = _this7.modalToggle.bind(_assertThisInitialized(_assertThisInitialized(_this7)));\n    _this7.handleClick = _this7.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this7)));\n    _this7.handleChange = _this7.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this7)));\n    return _this7;\n  }\n\n  _createClass(ModalItem, [{\n    key: \"handleClick\",\n    value: function handleClick(event) {\n      event.preventDefault();\n      this.props.handleClick(this.state.roomName);\n      this.setState({\n        roomName: '',\n        modal: false\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      var _this8 = this;\n\n      this.setState({\n        radius: event.target.value\n      }, function () {\n        _this8.props.setChatRadius(_this8.state.radius);\n      });\n    }\n  }, {\n    key: \"modalToggle\",\n    value: function modalToggle() {\n      this.setState({\n        modal: !this.state.modal\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this9 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onClick: this.modalToggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397\n        },\n        __self: this\n      }, this.props.btnText), React.createElement(Modal, {\n        isOpen: this.state.modal,\n        toggle: this.modalToggle,\n        className: this.props.className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.modalToggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399\n        },\n        __self: this\n      }, this.props.title, this.props.isRange ? this.state.radius : ''), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402\n        },\n        __self: this\n      }, React.createElement(InputGroup, {\n        id: \"roomInput\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }, this.props.isRange ? React.createElement(\"div\", {\n        className: \"rangeDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        },\n        __self: this\n      }, \"0.1\"), React.createElement(\"input\", {\n        className: \"rangeInput\",\n        type: \"range\",\n        min: \"0.1\",\n        max: \"1\",\n        step: \"0.1\",\n        onChange: function onChange(e) {\n          return _this9.handleChange(e);\n        },\n        value: this.state.radius,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407\n        },\n        __self: this\n      }, \"1.0\")) : React.createElement(Input, {\n        value: this.state.roomName,\n        onChange: function onChange(e) {\n          return _this9.setState({\n            roomName: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408\n        },\n        __self: this\n      }), this.props.isRange ? '' : React.createElement(InputGroupAddon, {\n        addonType: \"append\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        onClick: this.handleClick,\n        color: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      }, \"Submit\")))))));\n    }\n  }]);\n\n  return ModalItem;\n}(Component);\n\nvar ListClickable =\n/*#__PURE__*/\nfunction (_Component3) {\n  _inherits(ListClickable, _Component3);\n\n  function ListClickable() {\n    _classCallCheck(this, ListClickable);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ListClickable).apply(this, arguments));\n  }\n\n  _createClass(ListClickable, [{\n    key: \"handleClick\",\n    value: function handleClick(event) {\n      this.props.handleClick(event.target.id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this10 = this;\n\n      return React.createElement(\"div\", {\n        onClick: function onClick(e) {\n          return _this10.handleClick(e);\n        },\n        id: this.props.item,\n        className: this.props.isActive ? 'clickedItem' : '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429\n        },\n        __self: this\n      }, this.props.item);\n    }\n  }]);\n\n  return ListClickable;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/RoseSamuel/Desktop/RadioChat/client/src/App.js"],"names":["React","Component","Alert","Button","InputGroup","InputGroupText","InputGroupAddon","Collapse","CardBody","Card","Input","Form","Navbar","NavbarToggler","NavbarBrand","Nav","NavItem","NavLink","Dropdown","DropdownMenu","DropdownToggle","Modal","ModalHeader","ModalBody","ModalFooter","Fade","io","socket","connect","App","props","state","messages","roomMessages","input","id","name","localUsers","rooms","roomNames","newName","location","latitude","longitude","locationInterval","radius","modal","nameSuccess","activeName","activeRoom","fadeIn","handleSend","bind","beginLocationEmit","handleNameChange","setName","selectName","handleRoomCreation","selectRoom","setChatRadius","toggleFade","addMessage","addRoomMessage","addServerMessage","handleNameChangeResult","updateLocationBasedInfo","addPrivateMessage","elem","document","getElementById","scrollTop","scrollHeight","current","on","setState","userInfo","console","log","obj","message","msg","type","interval","setInterval","emit","room","result","success","intervalID1","clearInterval","intervalID2","event","preventDefault","recipient","rad","noLonger","filter","x","names","includes","newUsers","forEach","off","navigator","geolocation","getCurrentPosition","position","coords","messageList","map","index","__html","roomMessageList","nameList","roomNameList","roomList","e","target","value","ModalItem","roomName","modalToggle","handleClick","handleChange","btnText","className","title","isRange","ListClickable","item","isActive"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\n//Bootstrap used by Reactstrap\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//Reactstrap components\nimport {Alert, Button, InputGroup, InputGroupText, InputGroupAddon,\n    Collapse, CardBody, Card, Input, Form, Navbar,\n    NavbarToggler, NavbarBrand, Nav, NavItem, NavLink,\n    Dropdown, DropdownMenu, DropdownToggle, Modal, ModalHeader,\n    ModalBody, ModalFooter, Fade} from 'reactstrap';\n\n//Create client side socket\nimport * as io from 'socket.io-client';\nconst socket = io.connect('http://localhost:5000');\n\n//Main component for RadioChat\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      //All local messages\n      messages: [],\n      //All room messages (deleted upon leaving room)\n      roomMessages: [],\n      //Stores message input\n      input: '',\n      //Your socket.id\n      id: '',\n      //Your current name\n      name: '',\n      //List of local names based on your radius\n      localUsers: [],\n      //Local rooms based on radius\n      rooms: [],\n      //Names of users in current room\n      roomNames: [],\n      //Stores 'change name' input\n      newName:'',\n      //Your current latitude longitude\n      location: {latitude: '', longitude: ''},\n      //Holds id of setInterval that periodically emits location and other info to server\n      locationInterval: null,\n      //Chat radius\n      radius: 1,\n      //False if modal closed, true if open\n      modal: false,\n      //On failure set to false, causing alert to render\n      nameSuccess: true,\n      //Name of user currently clicked on (for PM)\n      activeName: null,\n      //Name of current room\n      activeRoom: null,\n      //Controls fade in of alerts\n      fadeIn: false\n\n    };\n    //bind 'this' to component functions\n    this.handleSend = this.handleSend.bind(this);\n    this.beginLocationEmit = this.beginLocationEmit.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.setName = this.setName.bind(this);\n    this.selectName = this.selectName.bind(this);\n    this.handleRoomCreation = this.handleRoomCreation.bind(this);\n    this.selectRoom = this.selectRoom.bind(this);\n    this.setChatRadius = this.setChatRadius.bind(this);\n    this.toggleFade = this.toggleFade.bind(this);\n    this.addMessage = this.addMessage.bind(this);\n    this.addRoomMessage = this.addRoomMessage.bind(this);\n    this.addServerMessage = this.addServerMessage.bind(this);\n    this.handleNameChangeResult = this.handleNameChangeResult.bind(this);\n    this.updateLocationBasedInfo = this.updateLocationBasedInfo.bind(this);\n    this.addPrivateMessage = this.addPrivateMessage.bind(this);\n  }\n  componentWillUpdate(){\n    //Cause message window to scroll automatically for message overflow\n    var elem = document.getElementById('message-window');\n    elem.scrollTop = elem.scrollHeight;\n  }\n  componentDidMount() {\n    let current = this;\n\n    /* This listener called when current chat room is no longer within client's\n    chat radius and they have left the room*/\n    socket.on('force_leave', function(){\n      current.setState({activeRoom: null});\n    });\n    //Listener for messages emitted from current room\n    socket.on('room_chat', this.addRoomMessage);\n    //Once connected client begins emitting location info\n    socket.on('on_connection', function(userInfo){\n      //socket id received from server\n      current.setState({id: userInfo.id}, () => {\n        //emit location and set name received from server\n        current.beginLocationEmit(3000);\n        current.setName(userInfo.name);\n      });\n    });\n    //Room name already exists\n    socket.on('room_fail', function(){\n      console.log('This name already exists');\n    });\n    //Receive general messages from server\n    socket.on('server_message', this.addServerMessage);\n    //If name change successful, updates name, else handles failure\n    socket.on('change_name_result', this.handleNameChangeResult);\n    //Listens for location related updates from server\n    socket.on('locals', this.updateLocationBasedInfo);\n    //Listens for private messages from server\n    socket.on('private', this.addPrivateMessage);\n\n  }\n  /*Add private message to state.messages and state.roomMessages\n  Obj Keys:\n  msg - message sent from user\n  name - name of sender*/\n  addPrivateMessage(obj){\n    //add css class 'privateSyle' to message\n    let message = \"<span class='privateStyle'>\" + obj.name + \"</span>\" + ': ' +obj.msg;\n    this.setState({\n      messages: [...this.state.messages, message],\n      roomMessages: [...this.state.roomMessages, message]\n    });\n  }\n  /*Add server message to state.messages and state.roomMessages\n  Obj Keys:\n  msg - message sent from server\n  type - type of message (determines css)*/\n  addServerMessage(obj){\n    let message = \"<div class='\" + obj.type + \"'>\" + obj.message + \"</div>\";\n    this.setState({messages: [...this.state.messages, message],\n      roomMessages: [...this.state.roomMessages, message]});\n  }\n  /*Add user message to state.roomMessages\n  Obj Keys:\n  msg - message sent from server\n  name - name of sender*/\n  addRoomMessage(obj){\n    let message = \"<span class='nameStyle'>\" + obj.name + \"</span>\" + ': ' +obj.msg;\n    this.setState({roomMessages: [...this.state.roomMessages, message]});\n  }\n  /*Add user message to state.messages\n  Obj Keys:\n  msg - message sent from server\n  name - name of sender*/\n  addMessage(obj){\n    console.log('in client addMessage, message is: ', obj.msg)\n    let message = \"<span class='nameStyle'>\" + obj.name + \"</span>\" + ': ' +obj.msg;\n    this.setState({messages: [...this.state.messages, message]});\n  }\n  //Set state.name to name\n  setName(name) {\n    this.setState({name: name});\n  }\n  //Sends latitude/longitude of device to server every 'interval' milliseconds\n  beginLocationEmit(interval) {\n    let current = this;\n    //Save setInterval id in state as 'locationInterval'\n    this.setState({locationInterval: setInterval(function(){\n      //Send client id, location, activeRoom and chat radius to server\n      socket.emit('location_update', {id: current.state.id, location: current.state.location,\n      room: current.state.activeRoom, radius: current.state.radius});\n    }, interval\n    )});\n  }\n  /*Handles response from server upon name change request\n  Obj Keys:\n  success - true if name successfully changed, false otherwise\n  name - new name (null on failure)*/\n  handleNameChangeResult(result){\n    //Upon failure trigger nameSuccess and toggleFade for alert\n    if (!result.success){\n      this.setState({nameSuccess: result.success});\n      this.toggleFade();\n      //Fade out alert after 3 seconds\n      let intervalID1 = setInterval(()=>{\n        this.toggleFade();\n        clearInterval(intervalID1);\n      }, 3000);\n      //Remove alert after 4 seconds\n      let intervalID2 = setInterval(()=>{\n        this.setState({nameSuccess: true});\n        clearInterval(intervalID2);\n      }, 4000);\n    }\n    //Set name upon success\n    else{\n      this.setName(result.name);\n    }\n  }\n  //Handles messages sent by client\n  handleSend(event) {\n    event.preventDefault();\n    //Send private message if user is selected from guest list\n    if(this.state.activeName){\n      socket.emit('private', {msg: this.state.input, recipient: this.state.activeName,\n        name: this.state.name});\n    }\n    //Else if user is in a room, send to the room\n    else if(this.state.activeRoom){\n      socket.emit('room_chat', {msg: this.state.input, room:this.state.activeRoom});\n    }\n    //If none of the above, emit message to own id\n    else if(!this.state.activeName){\n      console.log('emitting message: ', this.state.input);\n      socket.emit(this.state.name, {msg: this.state.input, name: this.state.name});\n    }\n    //Clear input from state\n    this.setState({input: ''});\n  }\n  //Send new name request to server\n  handleNameChange(name) {\n    socket.emit('change_name', name);\n  }\n  //Handle clicking on name in Guest menu\n  selectName(name){\n    this.setState( ({activeName}) => {\n      //If name already selected, or is client name, set activeName to null\n      if(activeName===name || name===this.state.name){\n        return {activeName: null};\n      }\n      //otherwise set activeName to name\n      return {activeName: name};\n    });\n  }\n  //Handle room selection\n  selectRoom(name){\n    //Clear room messages and deselect Guest names\n    this.setState({roomMessages: [], activeName: null});\n    this.setState( ({activeRoom}) => {\n      //If in room, leave it\n      if(activeRoom){\n        socket.emit('leave_room', {room: activeRoom, name: this.state.name});\n      }\n      //If clicking on\n      if(activeRoom===name){\n        return {activeRoom: null};\n      }\n      else{\n        socket.emit('join_room', {room: name, name: this.state.name} );\n        return {activeRoom: name};\n      }\n    });\n  }\n  handleRoomCreation(name){\n    socket.emit('room_creation', {name: name, location: this.state.location});\n  }\n  setChatRadius(rad){\n    this.setState({radius: rad});\n    console.log(rad);\n  }\n  toggleFade() {\n    this.setState({\n        fadeIn: !this.state.fadeIn\n    });\n  }\n  updateLocationBasedInfo(obj){\n    this.setState({rooms: obj.rooms, roomNames: obj.roomNames});\n    let noLonger = this.state.localUsers.filter(x => !obj.names.includes(x));\n    let newUsers = obj.names.filter(x => !this.state.localUsers.includes(x));\n    if (noLonger){\n      noLonger.forEach(x => {\n        socket.off(x, this.addMessage);\n      });\n    }\n    if (newUsers){\n      newUsers.forEach(x => {\n        socket.on(x, this.addMessage);\n      });\n    }\n    this.setState({localUsers: obj.names});\n  }\n\nrender() {\n  let current = this;\n  if (\"geolocation\" in navigator){\n    navigator.geolocation.getCurrentPosition(function(position) {\n      current.setState({location: {\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n        }\n      });\n    });\n  }\n    let messageList = this.state.messages.map((x, index) => {\n      return (\n        <div className=\"message-item\" key={index} dangerouslySetInnerHTML={{__html: x}} />\n      );\n    });\n    let roomMessageList = this.state.roomMessages.map((x, index)=>{\n      return (\n        <div className=\"message-item\" key={index} dangerouslySetInnerHTML={{__html: x}} />\n      );\n    });\n    let nameList = this.state.localUsers.map((x, index) => {\n      return (\n        <div className='clickable'><ListClickable isActive={this.state.activeName==x} id={index} key={index}\n          item={x} handleClick={this.selectName} /></div>\n      );\n    });\n    let roomNameList = this.state.roomNames.map((x, index) => {\n      return (\n        <div className='clickable'><ListClickable isActive={this.state.activeName==x} id={index} key={index}\n          item={x} handleClick={this.selectName} className='clickable'/></div>\n      );\n    });\n\n    let roomList = this.state.rooms.map((x, index)=>{\n      return (\n        <ListClickable isActive={this.state.activeRoom==x} id={index} key={index}\n        item={x} handleClick={this.selectRoom} className='clickable' />\n      );\n    });\n    return (\n      <div id=\"container\">\n      <div className='navigation' >\n      <Navbar color=\"faded\" light >\n        <NavbarBrand className=\"mr-auto\">RadioChat</NavbarBrand>\n          <Nav>\n          <NavItem className='nav-items'>\n          <ModalItem btnText='Change Name' title='Enter new name: ' handleClick={this.handleNameChange}/>\n          </NavItem>\n          <NavItem className='nav-items'>\n          <ModalItem  btnText='Create Room' title='Enter room name:' handleClick={this.handleRoomCreation}/>\n          </NavItem>\n          <NavItem className='nav-items'>\n          <ModalItem btnText='Chat Radius' title='Set chat radius (miles): ' isRange={true}\n            setChatRadius={this.setChatRadius}/>\n          </NavItem>\n          </Nav>\n      </Navbar>\n    </div>\n\n    {!this.state.nameSuccess ? (<Fade in={this.state.fadeIn}>\n      <Alert color=\"danger\" >That name is already in use!\n      </Alert></Fade>) : <div></div>}\n        <div id=\"message-container\">\n          <div id=\"message-window\">\n            {this.state.activeRoom ? roomMessageList : messageList}\n          </div>\n          <div id='right-panel'>\n            <div id='user-list'>\n              <div className='headings'>Guests</div>\n              {this.state.activeRoom}<br/>\n              {this.state.activeRoom ? roomNameList : nameList}\n            </div>\n            <div id='room-list'>\n              <div className='headings'>Rooms</div>\n              {roomList}\n            </div>\n          </div>\n          <Form>\n            <InputGroup id='textInput'>\n              <Input id='textField' value={this.state.input} onChange={e=>this.setState({input: e.target.value})}/>\n              <InputGroupAddon addonType=\"append\"><Button type='submit' onClick={this.handleSend}\n                color=\"secondary\">Send</Button>\n              </InputGroupAddon>\n            </InputGroup>\n          </Form>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nclass ModalItem extends Component{\n  constructor(props){\n    super(props);\n\n    this.state={\n      modal: false,\n      roomName: '',\n      radius: 1\n    };\n    this.modalToggle = this.modalToggle.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleClick(event){\n    event.preventDefault();\n    this.props.handleClick(this.state.roomName);\n    this.setState({roomName: '', modal: false});\n  }\n  handleChange(event){\n    this.setState({radius: event.target.value}, ()=>{\n      this.props.setChatRadius(this.state.radius);\n    });\n  }\n  modalToggle() {\n    this.setState({modal: !this.state.modal});\n  }\n  render(){\n    return(\n      <div>\n      <div onClick={this.modalToggle}>{this.props.btnText}</div>\n      <Modal isOpen={this.state.modal} toggle={this.modalToggle} className={this.props.className}>\n        <ModalHeader toggle={this.modalToggle}>{this.props.title}\n          {this.props.isRange ? this.state.radius : ''}</ModalHeader>\n        <ModalBody>\n          <Form>\n            <InputGroup id='roomInput'>\n              {this.props.isRange ? <div className='rangeDiv' ><label>0.1</label>\n              <input className='rangeInput' type='range' min='0.1' max='1' step='0.1'\n                onChange={e=>this.handleChange(e)} value={this.state.radius}/>\n              <label>1.0</label></div>:\n              <Input value={this.state.roomName} onChange={e=>this.setState({roomName: e.target.value})}/>}\n              {this.props.isRange ? '' : <InputGroupAddon addonType=\"append\"><Button type='submit' onClick={this.handleClick}\n                color=\"secondary\">Submit</Button>\n              </InputGroupAddon> }\n            </InputGroup>\n          </Form>\n        </ModalBody>\n      </Modal>\n      </div>\n    );\n  }\n}\nclass ListClickable extends Component{\n\n  handleClick(event){\n    this.props.handleClick(event.target.id);\n  }\n\n  render(){\n\n    return (\n      <div onClick={e => this.handleClick(e)} id={this.props.item}\n        className={this.props.isActive ? 'clickedItem' : ''}>{this.props.item}</div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}